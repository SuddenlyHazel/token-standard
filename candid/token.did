type TokenMetaData = record {
    name    : text;
    symbol  : text;
    decimal : u8;
    // List of the extensions this token implements.
    features: vec text;
};

type TransactionId = Nat;

type TransferError = variant {
    InsufficientBalance;
    AmountTooLarge;
    CallFailed;
    Unknown;
};

type TransferResult = variant {
    Ok : TransactionId;
    Err: TransferError;
};

type NotificationRecipient = func (text) -> ();

type NotifyArgs = record {
    callback : NotificationRecipient;
    transaction_id : TransactionId;
    metadata: text;
};

service : {
    // Return all of the meta data of a token.
    meta : () -> (TokenMetaData) query;

    // Return all of the meta data of a token as an update.
    meta_certified : () -> (TokenMetaData);

    // Returns the total token supply.
    total_supply : () -> (Nat) query;

    // This method should return the fee which will be captured for a given amount of transfer.
    // The token should always charge the exact fee in the transfer function.
    // If a token does not wish to capture any fees, it can just always return 0.
    compute_fee : (Nat) -> (Nat) query;

    // Returns the balance associated with an account, if the account is not provided, balance
    // of the caller must be returned.
    balance: (opt principal) -> (record { amount: Nat }) query;

    // Transfer a certain amount of tokens from caller to the recipient.
    // Notify argument is used if the caller wants to notify another canister of the transfer.
    // The provided method on the canister will be called, see Notifiable Canisters candid, to
    // see the method signature.
    // Set the `from` argument if the caller is spending on behalf of someone else.
    transfer: (record { from : opt principal; to: principal; amount: Nat; notify: opt NotifyArgs }) -> (TransferResult);

    // Returns the amount an spender is allowed to spend on behalf of an account.
    // The result is defined as `Min(ActualAllowance, AccountBalance)`.
    allowance : (record { spender: opt principal; account: principal; }) -> (Nat) query;

    // Allow an spender to use up to this amount.
    approval : (record { spender: principal; amount: Nat; }) -> ();
}
